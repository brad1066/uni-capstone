// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_URL")
  directUrl = env("SUPABASE_URL")
}

model UserSession {
  id           Int      @id @unique @default(autoincrement())
  user         User     @relation(fields: [userUsername], references: [username])
  cookieValue  String
  created      DateTime @default(now())
  userUsername String
}

model User {
  username       String        @id @unique
  password       String
  title          String
  forename       String
  middleNames    String?
  surname        String
  letters        String?
  contactDetails Contact?      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  role           UserRole
  // Auto Gen - leave untouched
  contactId      Int?
  student        Student?
  teacher        Teacher?
  userSessions    UserSession[]
  resources       Resource[]
}

model Student {
  id                 Int      @id @default(autoincrement()) @map("_id")
  user               User     @relation(fields: [username], references: [username], onDelete: Cascade)
  emergencyContact   Contact? @relation(fields: [emergencyContactId], references: [id], onDelete: Cascade)
  termAddress        Address? @relation("termAddress", fields: [termAddressId], references: [id], onDelete: Cascade)
  homeAddress        Address? @relation("homeAddress", fields: [homeAddressId], references: [id], onDelete: Cascade)
  personalTutor      Teacher? @relation(fields: [personalTutorId], references: [id], onDelete: SetNull)
  enrolledCourse     Course?  @relation(fields: [courseId], references: [id], onDelete: SetNull)
  // Auto Gen
  username           String   @unique
  emergencyContactId Int?     @unique
  termAddressId      Int?     @unique
  homeAddressId      Int?     @unique
  personalTutorId    Int?
  courseId           Int?
}

model Teacher {
  id        Int       @id @default(autoincrement()) @map("_id")
  user      User      @relation(fields: [username], references: [username], onDelete: Cascade)
  address   Address?  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  students  Student[]
  // Auto Gen
  username  String    @unique
  addressId Int?      @unique
}

model Course {
  id          Int             @id @default(autoincrement()) @map("_id")
  title       String
  description String
  websiteURL  String
  students    Student[]
  modules     CourseModules[]
}

model Module {
  id          Int             @id @default(autoincrement()) @map("_id")
  title       String
  description String?
  websiteURL  String?
  courses     CourseModules[]
  units       Unit[]
}

model Unit {
  id          Int             @id @default(autoincrement()) @map("_id")
  title       String
  description String?
  module      Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  sections    Section[]
  resources   UnitResources[]
  // Auto Gen
  moduleId    Int
}

model Section {
  id          Int                @id @default(autoincrement()) @map("_id")
  title       String
  description String?
  unit        Unit               @relation(fields: [unitId], references: [id], onDelete: Cascade)
  resources   SectionResources[]
  // Auto Gen
  unitId      Int
}

model Resource {
  id             Int                @id @default(autoincrement()) @map("_id")
  title          String
  description    String
  content        String
  author         User               @relation(fields: [authorUsername], references: [username])
  units          UnitResources[]
  sections       SectionResources[]
  // Auto Gen
  authorUsername String
}

// Relational Models
model CourseModules {
  id       Int    @id @default(autoincrement()) @map("_id")
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  // Auto Gen
  courseId Int
  moduleId Int
}

model SectionResources {
  id         Int      @id @default(autoincrement()) @map("_id")
  section    Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  // Auto Gen
  sectionId  Int
  resourceId Int
}

model UnitResources {
  id         Int      @id @default(autoincrement()) @map("_id")
  unit       Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  // Auto Gen
  unitId     Int
  resourceId Int
}

// Collections
model Address {
  id           Int       @id @default(autoincrement()) @map("_id")
  addressLine1 String?
  addressLine2 String?
  town         String?
  stateCounty  String?
  zipPostCode  String?
  studentHome  Student[] @relation("termAddress")
  studentTerm  Student[] @relation("homeAddress")
  teachers     Teacher[]
}

model Contact {
  id               Int       @id @default(autoincrement()) @map("_id")
  label            String?
  email            String?
  mobile           String?
  user             User[]
  studentEmergency Student[]
}

// Enum for User->role
enum UserRole {
  admin
  teacher
  student
  unassigned
}
